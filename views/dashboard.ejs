<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat App</title>
    <style>
      body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #1a1a1a 0%, #2e2e2e 100%);
        background-image: url('/img/back.jpg');
        background-size: cover;
        backdrop-filter: blur(10px);
      }

      .container {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        display: flex;
        flex-direction: row;
        height: 97%;
        width: 97%;
      }

      .sidebar {
        flex: 0.8;
        background-color: rgba(255, 255, 255, 0.1);
        border-top-left-radius: 10px;
        border-bottom-left-radius: 10px;
        padding: 10px;
        display: flex;
        flex-direction: column;
      }

      .search-bar {
        padding: 10px;
        border: none;
        border-radius: 5px;
        margin-bottom: 10px;
      }

      .user-list {
        flex: 1;
        overflow-y: auto;
      }

      .user {
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 5px;
        background: rgba(255, 255, 255, 0.1);
        cursor: pointer;
        display: flex;
        align-items: center;
        transition: background 0.2s ease-in-out;
        display: flex;
        flex-direction: column;
      }

      .user:hover {
        background: rebeccapurple;
      }

      .convo {
        flex: 2;
        display: flex;
        flex-direction: column;
      }

      .chat-header {
        padding: 10px;
        background: rgba(255, 255, 255, 0.1);

        text-align: center;
        font-weight: bold;
        margin-bottom: 10px;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
      }
      .chat-header img {
        width: 50px;
      }

      .messages {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
        display: flex;
        flex-direction: column;
      }

      .message {
        margin-bottom: 10px;

        display: flex;
        flex-direction: row;
        align-items: center;
      }

      .message p {
        margin: 0;
        padding: 10px;
        border-radius: 8px;
        max-width: 70%;
      }

      .message-actions {
        display: flex;
        flex-direction: row;
        color: white;
        gap: 10px;
        margin-left: 10px;
        margin-right: 10px;
      }

      /* Sent messages go to the right */
      .message.sent {
        justify-content: flex-end;
        margin-left: auto;
        margin-bottom: 10px;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
      }

      /* Received messages stay on the left */
      .message.received {
        justify-content: flex-start;
        margin-right: auto;
        margin-bottom: 10px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
      }

      .message.sent p {
        background: rebeccapurple;
        color: white;
        width: fit-content;
      }

      .message.received p {
        background: #f1f1f1;
        width: fit-content;
      }

      .input-area {
        display: flex;
        gap: 10px;
        flex-direction: column;
        background-color: #222;
        padding: 10px; /* top left bottom right */
        border-bottom-right-radius: 8px;
      }

      .input-area input {
        flex: 1;
        padding: 10px;
        border-radius: 5px;
        border: none;
      }

      .input-area button {
        padding: 10px;
        border-radius: 5px;
        border: none;
        background: rebeccapurple;
        color: white;
        cursor: pointer;
      }
      .newChat {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rebeccapurple;
        color: white;
        font-size: 20px;
        font-weight: bold;
        text-align: center;
        padding: 10px;
        border-radius: 50%;
        height: 40px;
        width: 40px;
        cursor: pointer;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s ease;
      }

      .newChat:hover {
        background-color: #7b1fa2;
      }

      .chatSearch {
        position: absolute;
        top: 60px;
        right: 10px;
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 10px;
        width: 250px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      #searchInput {
        width: calc(100% - 10px);
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      #searchButton {
        width: 100%;
        padding: 8px;
        background-color: rebeccapurple;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      #searchButton:hover {
        background-color: #7b1fa2;
      }

      .searchResults div {
        padding: 10px;
        cursor: pointer;
        border-bottom: 1px solid #eee;
      }

      .searchResults div:hover {
        background-color: #f0f0f0;
      }
      .active {
        background: rebeccapurple;
        color: white;
      }

      .userImg {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #ddd;
      }
      .username {
        font-size: 1rem;
        font-weight: bold;
        color: white;
      }

      .lastMessage {
        font-size: 0.9rem;
        color: white;
        margin: 0;
        line-height: 1.4;
        max-width: 100px; /* Or set a fixed width */
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
      }

      .time {
        font-size: 0.75rem;
        color: #888;
        align-self: flex-end;
      }
      .loading p {
        font-size: 16px;
      }

      .loading::after {
        content: '';
        display: block;
        width: 24px;
        height: 24px;
        margin: 10px auto;
        border: 3px solid white;
        border-top: 3px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      .horiFlex {
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }

      .replyFlex {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
      }

      .nameAndImage {
        display: flex;
        align-items: flex-start;
        gap: 10px;
      }
      .ago {
        width: 100%;
        text-align: right;
      }

      .placeHolder h1 {
        color: white;
      }

      .placeHolder img {
        height: 200px;
      }
      .placeHolder {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .explore {
        flex: 1;
      }
      .sidebar-toggle {
        display: block;
        position: fixed;
        top: 10px;
        left: 10px;
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px;
        cursor: pointer;
        z-index: 1100;
      }

      @media screen and (max-width: 768px) {
        .sidebar {
          display: none; /* Show sidebar on larger screens */
        }
        .sidebar-toggle {
          display: block; /* Hide toggle button on larger screens */
        }
        .user {
          display: flex;
          flex-direction: column;
        }
        .convo {
          flex: 3;
        }
        .nameAndImage {
          display: flex;
          flex-direction: column;
          align-items: center;
        }
        .lastMessage {
          display: none;
        }
      }
      .hovered {
        background-color: #f5f5f5;
        color: #333;
      }
      .reply-preview {
        background-color: #111;
        color: #fff;
        border-radius: 8px;
        padding: 12px;
        border: 1px solid #444;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 10px;
        border-left: 3px solid rebeccapurple;
      }

      .reply-preview .horiFlex {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .reply-preview .username {
        font-weight: bold;
        color: rebeccapurple;
      }

      .reply-preview p {
        margin: 5px 0;
        font-size: 14px;
      }

      .reply-preview .close-reply {
        cursor: pointer;
        color: #ff4d4d;
        font-weight: bold;
        font-size: 18px;
        padding: 2px 6px;
        border-radius: 50%;
        transition: background 0.2s ease;
      }

      .reply-preview .close-reply:hover {
        background: #ff4d4d;
        color: #fff;
      }
      .reply-preview-box {
        background-color: #444;
        color: #ccc;
        padding: 8px;
        border-left: 3px solid #007bff;
        border-radius: 5px;

        font-size: 0.9em;
        max-width: 80%;
        word-wrap: break-word;
      }
      .actionAndMessage {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
      }
      .pushNotifications {
        position: fixed;
        bottom: 10px;
        right: 10px;
        max-width: 300px;
        z-index: 1000;
        display: none;
      }

      .notification {
        background-color: #007bff;
        color: #fff;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        margin-bottom: 10px;
        cursor: pointer;
        animation: fadeIn 0.3s ease;
      }

      .notification-content {
        display: flex;
        align-items: center;
      }

      .notification-icon {
        margin-right: 10px;
      }

      .notification-icon i {
        font-size: 20px;
      }

      .notification-sender {
        font-weight: bold;
        margin-right: 10px;
      }

      .notification-text {
        display: flex;
        flex-direction: column;
      }

      .notification-title {
        font-weight: bold;
      }

      .notification-message {
        font-size: 14px;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .message {
        position: relative;
      }

      .action-btn {
        cursor: pointer;
        padding: 8px 12px;
        border-radius: 8px;

        color: #fff;
        font-size: 14px;
      }

      .reactions-container {
        display: none; /* Initially hidden */
        position: absolute;
        top: 100%; /* Appear right below the button */
        left: 0;
        border: 1px solid #ccc;

        background: #222;
        border-radius: 10px;
        z-index: 1000;
        gap: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        white-space: nowrap; /* Keep reactions in a single row */
        margin-top: 4px;
      }

      .reaction-btn {
        cursor: pointer;
        padding: 8px;
        border-radius: 50%;
        font-size: 20px;
        transition: background 0.2s;
      }

      .reaction-btn:hover {
        background: #444;
      }

      .call {
        cursor: pointer;
      }
      /* Style for the incoming call notification */
      .incoming-call {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 20px;
        background: #ffffff;
        border: 2px solid #007bff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 9999;
        max-width: 300px;
        text-align: center;
        animation: slideIn 0.3s ease-in-out;
      }

      .incoming-call p {
        margin: 0 0 15px;
        font-size: 1.2em;
        color: #333;
      }

      .incoming-call button {
        padding: 10px 20px;
        font-size: 1em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin: 0 10px;
      }

      #acceptCall {
        background-color: #28a745;
        color: #fff;
      }

      #acceptCall:hover {
        background-color: #218838;
      }

      #rejectCall {
        background-color: #dc3545;
        color: #fff;
      }

      #rejectCall:hover {
        background-color: #c82333;
      }

      /* Slide-in animation */
      @keyframes slideIn {
        from {
          transform: translateX(100%);
        }
        to {
          transform: translateX(0);
        }
      }
    </style>
  </head>
  <body>
    <div class="newChat">+</div>

    <div class="chatSearch" style="display: none">
      <input type="text" id="searchInput" placeholder="Search for a user..." />
      <button id="searchButton">Search</button>
      <div class="searchResults"></div>
    </div>
    <div class="container">
      <button class="sidebar-toggle" onclick="toggleSidebar()">☰ Menu</button>

      <div class="sidebar">
        <input type="text" class="search-bar" placeholder="Search users..." />
        <div class="user-list"></div>

        <div
          class="loading"
          style="display: none; text-align: center; padding: 10px"
        >
          <p style="color: white">Loading...</p>
        </div>
      </div>
      <div class="convo">
        <div class="chat-header"></div>
        <div class="messages">
          <div class="placeHolder">
            <h1>select a user to chat with!</h1>
            <img src="/img/planet.png" alt="" />
          </div>
        </div>
      </div>
      <div class="pushNotifications"></div>
      <audio style="display: none" id="remoteAudio" autoplay></audio>
    </div>

    <script src="/js/node-rsa-browser.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/crypto-js@4.1.1/crypto-js.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script>
      const notificationContainer =
        document.querySelector('.pushNotifications');
      notificationContainer.style.display = 'block';

      function toggleSidebar() {
        const convo = document.querySelector('.convo');

        const sidebar = document.querySelector('.sidebar');
        sidebar.style.display =
          sidebar.style.display === 'block' ? 'none' : 'block';
      }

      const socket = io();

      socket.on('connect', () => {
        console.log('Connected to the server');
      });

      socket.emit('register', () => {
        console.log('Registered with the server');
      });

      let publicKeyPem;
      let privateKeyPem;

      async function generateRSAKeys() {
        const keyPair = await window.crypto.subtle.generateKey(
          {
            name: 'RSA-OAEP',
            modulusLength: 2048,
            publicExponent: new Uint8Array([1, 0, 1]),
            hash: 'SHA-256',
          },
          true,
          ['encrypt', 'decrypt']
        );

        publicKeyPem = await arrayBufferToPem(
          await window.crypto.subtle.exportKey('spki', keyPair.publicKey),
          'PUBLIC KEY'
        );
        privateKeyPem = await arrayBufferToPem(
          await window.crypto.subtle.exportKey('pkcs8', keyPair.privateKey),
          'PRIVATE KEY'
        );
      }
      if (!window.crypto || !window.crypto.subtle) {
        alert('Web Crypto API not supported');
      }

      function arrayBufferToPem(buffer, label) {
        const base64 = btoa(String.fromCharCode(...new Uint8Array(buffer)));
        const formattedKey = base64.match(/.{1,64}/g).join('\n');
        return `-----BEGIN ${label}-----\n${formattedKey}\n-----END ${label}-----`;
      }

      async function initializeKeysAndLoadConversations() {
        await generateRSAKeys();

        const publicKey = publicKeyPem;
        const privateKey = privateKeyPem;

        loadConversations();
      }

      async function encryptWithRSA(data) {
        if (!publicKeyPem) {
          throw new Error(
            'Public key is not generated. Call generateRSAKeys first.'
          );
        }

        const publicKey = await importPublicKey(publicKeyPem);
        const encodedData = new TextEncoder().encode(data);

        const encryptedData = await window.crypto.subtle.encrypt(
          {
            name: 'RSA-OAEP',
          },
          publicKey,
          encodedData
        );

        return arrayBufferToBase64(encryptedData);
      }

      async function importPublicKey(pem) {
        const binaryDer = pemToArrayBuffer(pem);
        return await window.crypto.subtle.importKey(
          'spki',
          binaryDer,
          {
            name: 'RSA-OAEP',
            hash: 'SHA-256',
          },
          true,
          ['encrypt']
        );
      }

      function pemToArrayBuffer(pem) {
        const base64 = pem.replace(/-----[^-]+-----/g, '').replace(/\s/g, '');
        const binary = atob(base64);
        const buffer = new Uint8Array(binary.length);
        for (let i = 0; i < binary.length; i++) {
          buffer[i] = binary.charCodeAt(i);
        }
        return buffer.buffer;
      }

      function arrayBufferToBase64(buffer) {
        const binary = String.fromCharCode(...new Uint8Array(buffer));
        return btoa(binary);
      }

      initializeKeysAndLoadConversations();

      /*
                      function generateRSAKeys() {
                        const key = new NodeRSA({ b: 2048 });

                        return {
                          publicKey: key.exportKey('pkcs8-public-pem'),
                          privateKey: key.exportKey('pkcs8-private-pem'),
                        };
                      }


                      const { publicKey, privateKey } = generateRSAKeys();
                     */

      function joinConversation() {
        const conversationId = globalConversationId;
        if (!conversationId) {
          alert('Please enter a conversation ID!');
          return;
        }

        socket.emit('joinConversation', conversationId);
        console.log(`Joined conversation: ${conversationId}`);
      }

      function encryptMessage(message, key) {
        return CryptoJS.AES.encrypt(message, key).toString();
      }

      function decryptMessage(cipherText, key) {
        try {
          const bytes = CryptoJS.AES.decrypt(cipherText, key);
          return bytes.toString(CryptoJS.enc.Utf8);
        } catch (err) {
          return '[Decryption failed]';
        }
      }

      function decryptWithRSA(encryptedData, privateKey) {
        try {
          const key = new NodeRSA(privateKey, 'pkcs8-private-pem');
          return key.decrypt(encryptedData, 'utf8');
        } catch (err) {
          console.error('RSA decryption failed:', err.message);
          return null;
        }
      }

      const users = document.querySelectorAll('.user');
      const newChatButton = document.querySelector('.newChat');
      const chatSearch = document.querySelector('.chatSearch');
      const searchInput = document.getElementById('searchInput');
      const searchButton = document.getElementById('searchButton');
      const searchResults = document.querySelector('.searchResults');
      const userList = document.querySelector('.user-list');
      const loadingIndicator = document.querySelector('.loading');
      const messagesContainer = document.querySelector('.messages');
      const convo = document.querySelector('.convo');

      let page = 1;
      const limit = 50;
      let loading = false;
      let hasMore = true;

      let messagesPage = 1;
      let hasMoreMessages = true;
      let isLoading = false;

      let globalDecryptedKey;
      let globalMyId;
      let globalConversationId;

      function appendTextarea(conversationId) {
        const convo = document.querySelector('.convo');
        const inputArea = document.createElement('div');
        inputArea.classList.add('input-area');
        inputArea.innerHTML = `
                           <div style="display: flex; align-items: center; width: 100%; gap: 10px">
                            <input type="text" onkeydown="handleEnter(event)" id="messageInput" placeholder="Type a message..." />
                            <button onclick="sendMessage()">Send</button>
                           </div>
                          `;
        if (!convo.querySelector('.input-area')) {
          convo.appendChild(inputArea);
        }
      }

      function handleEnter(event) {
        if (event.key === 'Enter') {
          sendMessage();
        }
      }

      function formatTime(timestamp) {
        const now = new Date();
        const messageTime = new Date(timestamp);
        const diffMs = now - messageTime;
        const diffMinutes = Math.floor(diffMs / (1000 * 60));
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

        if (diffMinutes < 1) return 'NOW';
        if (diffMinutes < 60)
          return `${diffMinutes} min${diffMinutes > 1 ? 's' : ''} ago`;
        if (diffHours < 24)
          return `${diffHours} hr${diffHours > 1 ? 's' : ''} ago`;
        if (diffDays < 7)
          return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;

        return messageTime.toLocaleDateString(); // Show full date for older messages
      }

      async function loadConversations() {
        console.log('Loading conversations...');
        if (loading || !hasMore) return;

        loading = true;
        loadingIndicator.style.display = 'block';

        try {
          const response = await fetch(`/convos?page=${page}&limit=${limit}`);
          const data = await response.json();

          loadingIndicator.style.display = 'none';

          if (data.length === 0) {
            hasMore = false;
            return;
          }

          await Promise.all(
            data.map(async (convo) => {
              const userDiv = createUserDiv(convo);
              userList.appendChild(userDiv);
            })
          );

          page++;
        } catch (error) {
          console.error('Error loading conversations:', error);
        } finally {
          loading = false;
        }
      }

      function createUserDiv(convo) {
        const userDiv = document.createElement('div');
        userDiv.classList.add('user');
        userDiv.dataset.id = convo.conversationId;

        fetchConversationKey(convo.conversationId, publicKeyPem).then((key) => {
          userDiv.innerHTML = `
              <div class="horiFlex">
                <div class="nameAndImage">
                  <img class="userImg" src="${
                    convo.otherUserImage
                  }" alt="User Image" />
                  <div class="lastMessageAndName">
                    <span class="username">@${convo.otherUsername}</span>
                    <p class="lastMessage">${decryptMessage(
                      convo.lastMessage,
                      key
                    )}</p>
                  </div>
                </div>
              </div>
              <div class="ago">
                <span class="time">${formatTime(convo.lastMessageTime)}</span>
              </div>
            `;

          userDiv.addEventListener('click', () =>
            handleUserClick(userDiv, convo)
          );
        });

        return userDiv;
      }

      function handleUserClick(userDiv, convo) {
        if (userDiv.classList.contains('active')) return;

        if (globalConversationId) {
          leaveConversation();
        }

        document
          .querySelectorAll('.user')
          .forEach((u) => u.classList.remove('active'));
        userDiv.classList.add('active');

        document.querySelector('.chat-header').innerHTML = `
          <div style="display:flex; align-items:center; gap:10px" >  <img src="${convo.otherUserImage}" alt="User Image" />
            <span class="username">@${convo.otherUsername}</span></div>
            <p class="call" onClick="callUser('${convo.otherUserId}',false) ">📞</p>
            <p class="call" onClick="callUser('${convo.otherUserId}',true) ">AAAA</p>
            
          `;

        globalConversationId = convo.conversationId;
        console.log('Switching to conversation:', globalConversationId);

        switchConversation(globalConversationId);
        joinConversation();
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        console.log(convo.otherUserId);
        appendTextarea(convo.conversationId);
      }

      function leaveConversation() {
        socket.emit('leaveConversation', globalConversationId);
        console.log(`Left conversation: ${globalConversationId}`);
      }

      // Scroll to load more conversations
      userList.addEventListener('scroll', () => {
        if (
          userList.scrollTop + userList.clientHeight >=
          userList.scrollHeight - 50
        ) {
          loadConversations();
        }
      });

      const reactions = {
        like: '👍',
        love: '❤️',
        haha: '😂',
        wow: '😮',
        sad: '😢',
        angry: '😠',
      };

      function createActionButtons(msg, key) {
        const actionsDiv = document.createElement('div');
        actionsDiv.classList.add('message-actions');

        // Reply Button
        const replyBtn = document.createElement('div');
        replyBtn.classList.add('action-btn');
        replyBtn.textContent = '↩';

        replyBtn.addEventListener('click', () => {
          const messageInput = document.getElementById('messageInput');
          const inputArea = document.querySelector('.input-area');
          const existingPreview = document.querySelector('.reply-preview');

          if (existingPreview && existingPreview.dataset.id === msg._id) return;
          if (existingPreview) existingPreview.remove();

          const replyPreview = document.createElement('div');
          replyPreview.classList.add('reply-preview');
          replyPreview.dataset.id = msg._id;
          replyPreview.innerHTML = `
        <div class="replyFlex">
          <span class="username">@${msg.sender.username}</span>
          <span class="close-reply">❌</span>
        </div>
        <p>${decryptMessage(msg.text, key)}</p>
      `;

          replyPreview
            .querySelector('.close-reply')
            .addEventListener('click', () => {
              replyPreview.remove();
            });

          inputArea.prepend(replyPreview);
          messageInput.focus();
        });

        // Reaction Button
        const reactBtn = document.createElement('div');
        reactBtn.classList.add('action-btn');
        reactBtn.textContent = '☺';

        const reactionsContainer = document.createElement('div');
        reactionsContainer.classList.add('reactions-container');

        // Example reactions

        // Create reaction buttons
        for (const reaction in reactions) {
          const reactionBtn = document.createElement('div');
          reactionBtn.classList.add('reaction-btn');
          reactionBtn.textContent = reactions[reaction];

          // Handle reaction click
          // Handle reaction click
          reactionBtn.addEventListener('click', () => {
            reactBtn.textContent = reactions[reaction]; // Show emoji on button
            reactionsContainer.style.display = 'none'; // Hide container

            // Emit reaction name
            console.log('Selected reaction:', reaction); // Emit the reaction name
            console.log('Message ID:', msg._id);

            // Example: Emit through WebSocket or API
            socket.emit('reaction', { messageId: msg._id, reaction: reaction });
          });

          reactionsContainer.appendChild(reactionBtn);
        }

        // Toggle reactions visibility on click
        reactBtn.addEventListener('click', (event) => {
          event.stopPropagation(); // Prevent click from bubbling
          reactionsContainer.style.display =
            reactionsContainer.style.display === 'flex' ? 'none' : 'flex';
        });

        // Hide reactions container when clicking outside
        document.addEventListener('click', (event) => {
          if (
            !reactBtn.contains(event.target) &&
            !reactionsContainer.contains(event.target)
          ) {
            reactionsContainer.style.display = 'none';
          }
        });

        // Append elements
        actionsDiv.appendChild(replyBtn);
        actionsDiv.appendChild(reactBtn);
        actionsDiv.appendChild(reactionsContainer);

        return actionsDiv;
      }

      function addMessageToUI(msg, myId, key, fetching = true, rece = false) {
        if (!messagesContainer) {
          console.error('messagesContainer not found!');
          return;
        }

        const messageDiv = document.createElement('div');
        const messageContent = document.createElement('p');
        const actionsDiv = createActionButtons(msg, key);

        messageDiv.classList.add(
          'message',
          msg.sender?._id === myId ? 'sent' : 'received'
        );
        messageDiv.dataset.id = msg._id;

        messageContent.textContent =
          fetching || rece ? decryptMessage(msg.text, key) : msg.text;

        const actionAndMessage = document.createElement('div');
        actionAndMessage.classList.add('actionAndMessage');

        if (msg.replyingTo) {
          const replyPreviewDiv = document.createElement('div');
          replyPreviewDiv.classList.add('reply-preview-box');
          replyPreviewDiv.innerHTML = msg.replyingTo
            ? `<div class="reply-preview-content">
                  <strong>${
                    msg.replyingTo.sender?._id === myId
                      ? 'You'
                      : msg.replyingTo.sender?.username || 'Unknown'
                  }</strong>
                  ${decryptMessage(msg.replyingTo.text, key)}
                </div>`
            : `<div class="reply-preview-content"><strong>Replying to</strong>: [Message not found]</div>`;

          messageDiv.prepend(replyPreviewDiv);
        }

        if (messageDiv.classList.contains('sent')) {
          actionAndMessage.appendChild(actionsDiv);
          actionAndMessage.appendChild(messageContent);
        } else {
          actionAndMessage.appendChild(messageContent);
          actionAndMessage.appendChild(actionsDiv);
        }

        messageDiv.appendChild(actionAndMessage);

        if (rece) {
          messagesContainer.appendChild(messageDiv); // Append new messages
        } else {
          fetching
            ? messagesContainer.prepend(messageDiv) // Prepend fetched messages
            : messagesContainer.appendChild(messageDiv);
        }
      }

      async function fetchMessages(conversationId) {
        if (!hasMoreMessages || isLoading) return;

        isLoading = true;

        try {
          const key = await fetchConversationKey(conversationId, publicKeyPem);
          globalDecryptedKey = key;

          const res = await fetch(
            `/api/users/conversations/${conversationId}?page=${messagesPage}&limit=${limit}`
          );

          if (!res.ok)
            throw new Error(`Failed to fetch messages: ${res.statusText}`);

          const data = await res.json();
          const { conversation, myId, hasMoreMessages: more } = data;
          hasMoreMessages = more;
          globalMyId = myId;

          conversation.messages.forEach((msg) =>
            addMessageToUI(msg, myId, key)
          );

          messagesContainer.scrollTop =
            messagesPage === 1
              ? messagesContainer.scrollHeight
              : messagesContainer.scrollTop;
          messagesPage++;
        } catch (error) {
          console.error('Error fetching messages:', error);
        } finally {
          isLoading = false;
        }
      }

      socket.on('notification', async ({ sender, conversationId, message }) => {
        const key = await fetchConversationKey(conversationId, publicKeyPem);

        let nuMsg = decryptMessage(message, key);

        console.log(nuMsg);
        showNotification(sender, nuMsg, conversationId);
        updateConversationLastMessage(conversationId, nuMsg);
      });

      async function showNotification(sender, message, conversationId) {
        console.log(message);
        const notificationContainer =
          document.querySelector('.pushNotifications');

        // Create notification element
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon">
                    <i class="fas fa-bell"></i>
                </div>
                <div class="notification-sender">${sender}</div>
                <div class="notification-text">
                    <span class="notification-title">New Message</span>
                    <span class="notification-message">${message}</span>
                </div>
            </div>
        `;

        // Show the notification
        notificationContainer.appendChild(notification);
        notificationContainer.style.display = 'block';

        // Auto-hide after 5 seconds
        setTimeout(() => {
          notification.remove();
          if (notificationContainer.children.length === 0) {
            notificationContainer.style.display = 'none';
          }
        }, 3000);
      }

      async function sendMessage() {
        const messageInput = document.getElementById('messageInput');
        const rawMessage = messageInput.value.trim();

        if (!messageInput || !rawMessage) {
          alert('Message cannot be empty!');
          return;
        }

        try {
          const encryptedMessage = encryptMessage(
            rawMessage,
            globalDecryptedKey
          );
          const replyingTo = document.querySelector('.reply-preview');
          const messageId = replyingTo?.dataset.id;

          socket.emit('sendMessage', {
            conversationId: globalConversationId,
            message: encryptedMessage,
            replyingTo: messageId || undefined,
          });

          messageInput.value = '';
          if (replyingTo) replyingTo.remove();
        } catch (error) {
          console.error('Error sending message:', error);
          alert('Failed to send message. Please try again.');
        }
      }

      socket.on('messageSent', ({ newMessage, conversationId }) => {
        if (conversationId === globalConversationId) {
          addMessageToUI(
            newMessage,
            globalMyId,
            globalDecryptedKey,
            false,
            true
          );
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
      });

      socket.on('receiveMessage', ({ newMessage, conversationId }) => {
        updateConversationLastMessage(
          conversationId,
          decryptMessage(newMessage.text, globalDecryptedKey)
        );
        if (conversationId === globalConversationId) {
          addMessageToUI(
            newMessage,
            globalMyId,
            globalDecryptedKey,
            false,
            true
          );
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
      });

      function switchConversation(conversationId) {
        messagesContainer.innerHTML = '';
        messagesPage = 1;
        hasMoreMessages = true;
        fetchMessages(conversationId);
      }

      async function fetchConversationKey(convoId, publicKey) {
        try {
          const response = await fetch(
            `/api/users/get-conversation-key/${convoId}`,
            {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ publicKey }),
            }
          );

          if (!response.ok) {
            throw new Error(`Failed to fetch key: ${response.status}`);
          }

          const data = await response.json();

          console.log('Fetched conversation key:', data.encryptedKey);

          const decryptedKey = decryptWithRSA(data.encryptedKey, privateKeyPem);
          globalDecryptedKey = decryptedKey;
          console.log('active convo' + globalConversationId);
          return decryptedKey;
        } catch (err) {
          console.error('Error fetching conversation key:', err);
        }
      }

      messagesContainer.addEventListener('scroll', () => {
        if (
          messagesContainer.scrollTop === 0 &&
          hasMoreMessages &&
          !isLoading
        ) {
          fetchMessages(document.querySelector('.user.active')?.dataset.id);
        }
      });

      function getActiveConversationId() {
        const activeUser = document.querySelector('.user.active');
        return activeUser ? activeUser.dataset.id : null;
      }

      messagesContainer.addEventListener('scroll', () => {
        if (messagesContainer.scrollTop === 0) {
          const conversationId = getActiveConversationId();

          // Save the current scroll position and height
          const oldScrollTop = messagesContainer.scrollTop;
          const oldHeight = messagesContainer.scrollHeight;

          // Disable scrolling

          fetchMessages(conversationId).then(() => {
            // Use setTimeout to wait for the rendering to finish
            setTimeout(() => {
              const newHeight = messagesContainer.scrollHeight;

              // Restore scroll position without any flicker
              messagesContainer.scrollTop = newHeight - oldHeight;

              // Re-enable scrolling
              messagesContainer.style.overflow = '';
            }, 0);
          });
        }
      });

      function updateConversationLastMessage(conversationId, message) {
        const userDiv = document.querySelector(
          `.user[data-id="${conversationId}"]`
        );
        if (userDiv) {
          userDiv.querySelector('.lastMessage').textContent = message;
        }
      }

      newChatButton.addEventListener('click', () => {
        chatSearch.style.display =
          chatSearch.style.display === 'none' ? 'block' : 'none';
        searchInput.focus();
      });

      searchButton.addEventListener('click', () => {
        const query = searchInput.value.trim();
        if (query) {
          searchUsers(query);
        } else {
          searchResults.innerHTML =
            '<div>Please enter a username to search.</div>';
        }
      });

      async function searchUsers(query) {
        try {
          const response = await fetch(
            `/api/users/search-users?query=${query}`
          );
          const users = await response.json();

          if (users.length === 0) {
            searchResults.innerHTML = '<div>No users found.</div>';
            return;
          }

          searchResults.innerHTML = users
            .map(
              (user) => `
                        <div data-id="${user.id}">
                          ${user.username}
                          <img src="${user.image}" alt="User Image" />
                        </div>
                      `
            )
            .join('');
        } catch (error) {
          console.error('Error searching users:', error);
          searchResults.innerHTML =
            '<div>Error searching users. Try again later.</div>';
        }
      }

      searchResults.addEventListener('click', (e) => {
        if (e.target.dataset.id) {
          const userId = e.target.dataset.id;
          const username = e.target.innerText;

          startChat(userId, username);
          chatSearch.style.display = 'none';
          searchInput.value = '';
        }
      });
    </script>
    <script src="/js/dashboard.js"></script>
  </body>
</html>
