<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat App</title>
    <style>
      body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #1a1a1a 0%, #2e2e2e 100%);
        background-image: url('/img/back.jpg');
        background-size: cover;
        backdrop-filter: blur(10px);
      }

      .container {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        display: flex;
        flex-direction: row;
        height: 80%;
        width: 80%;
        max-width: 800px;
      }

      .sidebar {
        flex: 0.6;
        background-color: rgba(255, 255, 255, 0.1);
        border-top-left-radius: 10px;
        border-bottom-left-radius: 10px;
        padding: 10px;
        display: flex;
        flex-direction: column;
      }

      .search-bar {
        padding: 10px;
        border: none;
        border-radius: 5px;
        margin-bottom: 10px;
      }

      .user-list {
        flex: 1;
        overflow-y: auto;
      }

      .user {
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 5px;
        background: rgba(255, 255, 255, 0.1);
        cursor: pointer;
        display: flex;
        align-items: center;
        transition: background 0.2s ease-in-out;
      }

      .user:hover {
        background: rebeccapurple;
      }

      .convo {
        flex: 2;
        display: flex;
        flex-direction: column;
        padding: 10px;
      }

      .chat-header {
        padding: 10px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 5px;
        text-align: center;
        font-weight: bold;
        margin-bottom: 10px;
      }

      .messages {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
        display: flex;
        flex-direction: column;
      }

      .message {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        max-width: 70%;
      }

      .message.sent {
        background: rebeccapurple;
        color: white;
        align-self: flex-end;
      }

      .message.received {
        background: #f1f1f1;
        align-self: flex-start;
      }

      .input-area {
        display: flex;
        gap: 10px;
      }

      .input-area input {
        flex: 1;
        padding: 10px;
        border-radius: 5px;
        border: none;
      }

      .input-area button {
        padding: 10px;
        border-radius: 5px;
        border: none;
        background: rebeccapurple;
        color: white;
        cursor: pointer;
      }
      .newChat {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rebeccapurple;
        color: white;
        font-size: 20px;
        font-weight: bold;
        text-align: center;
        padding: 10px;
        border-radius: 50%;
        height: 40px;
        width: 40px;
        cursor: pointer;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s ease;
      }

      .newChat:hover {
        background-color: #7b1fa2;
      }

      .chatSearch {
        position: absolute;
        top: 60px;
        right: 10px;
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 10px;
        width: 250px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      #searchInput {
        width: calc(100% - 10px);
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      #searchButton {
        width: 100%;
        padding: 8px;
        background-color: rebeccapurple;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      #searchButton:hover {
        background-color: #7b1fa2;
      }

      .searchResults div {
        padding: 10px;
        cursor: pointer;
        border-bottom: 1px solid #eee;
      }

      .searchResults div:hover {
        background-color: #f0f0f0;
      }
      .active {
        background: rebeccapurple;
        color: white;
      }

      .userImg {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
      }

      .loading p {
        font-size: 16px;
      }

      .loading::after {
        content: '';
        display: block;
        width: 24px;
        height: 24px;
        margin: 10px auto;
        border: 3px solid white;
        border-top: 3px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
  </head>
  <body>
    <div class="newChat">+</div>

    <div class="chatSearch" style="display: none">
      <input type="text" id="searchInput" placeholder="Search for a user..." />
      <button id="searchButton">Search</button>
      <div class="searchResults"></div>
    </div>
    <div class="container">
      <div class="sidebar">
        <input type="text" class="search-bar" placeholder="Search users..." />
        <div class="user-list">
          <!-- Users will be loaded here -->
        </div>

        <div
          class="loading"
          style="display: none; text-align: center; padding: 10px"
        >
          <p style="color: white">Loading...</p>
        </div>
      </div>
      <div class="convo">
        <div class="chat-header">User 1</div>
        <div class="messages">
          <div class="message received">Hello! How are you?</div>
          <div class="message sent">I'm good, thanks! How about you?</div>
          <div class="message received">I'm also doing well, thanks!</div>
        </div>
        <div class="input-area">
          <input type="text" placeholder="Type a message..." />
          <button>Send</button>
        </div>
      </div>
    </div>
    <script>
      //make the clicked user the active user
      const users = document.querySelectorAll('.user');
      users.forEach((user) => {
        user.addEventListener('click', () => {
          users.forEach((u) => u.classList.remove('active'));
          user.classList.add('active');
        });
      });

      const userList = document.querySelector('.user-list');
      const loadingIndicator = document.querySelector('.loading');

      let page = 1;
      const limit = 10;
      let loading = false;
      let hasMore = true;

      // Function to fetch conversations
      async function loadConversations() {
        console.log('Loading conversations...');
        if (loading || !hasMore) return;
        loading = true;
        loadingIndicator.style.display = 'block';

        try {
          const response = await fetch(`/convos?page=${page}&limit=${limit}`);
          const data = await response.json();

          loadingIndicator.style.display = 'none';

          if (data.length === 0) {
            hasMore = false;
            return;
          }

          data.forEach((convo) => {
            const userDiv = document.createElement('div');
            userDiv.classList.add('user');
            userDiv.innerHTML = `
        <img class="userImg" src="${convo.otherUserImage}" alt="User Image" />
        <span class="username">${convo.otherUsername}</span>
        <p>
          ${convo.lastMessage}
          <span class="time">${convo.lastMessageTime}</span>
        </p>
      `;

            // Handle active user click
            userDiv.addEventListener('click', () => {
              document
                .querySelectorAll('.user')
                .forEach((u) => u.classList.remove('active'));
              userDiv.classList.add('active');
            });

            userList.appendChild(userDiv);
          });

          page++;
        } catch (error) {
          console.error('Error loading conversations:', error);
        } finally {
          loading = false;
        }
      }

      // Load conversations on scroll
      userList.addEventListener('scroll', () => {
        if (
          userList.scrollTop + userList.clientHeight >=
          userList.scrollHeight - 50
        ) {
          loadConversations();
        }
      });

      // Initial load
      loadConversations();
      const newChatButton = document.querySelector('.newChat');
      const chatSearch = document.querySelector('.chatSearch');
      const searchInput = document.getElementById('searchInput');
      const searchButton = document.getElementById('searchButton');
      const searchResults = document.querySelector('.searchResults');

      // Show/hide search box
      newChatButton.addEventListener('click', () => {
        chatSearch.style.display =
          chatSearch.style.display === 'none' ? 'block' : 'none';
        searchInput.focus();
      });

      // Search users from the backend (only on button click)
      searchButton.addEventListener('click', () => {
        const query = searchInput.value.trim();
        if (query) {
          searchUsers(query);
        } else {
          searchResults.innerHTML =
            '<div>Please enter a username to search.</div>';
        }
      });

      // Fetch users from the server
      async function searchUsers(query) {
        try {
          const response = await fetch(
            `/api/users/search-users?query=${query}`
          );
          const users = await response.json();

          if (users.length === 0) {
            searchResults.innerHTML = '<div>No users found.</div>';
            return;
          }

          searchResults.innerHTML = users
            .map(
              (user) => `
      <div data-id="${user.id}">
        ${user.username}
        <img src="${user.image}" alt="User Image" />
      </div>
    `
            )
            .join('');
        } catch (error) {
          console.error('Error searching users:', error);
          searchResults.innerHTML =
            '<div>Error searching users. Try again later.</div>';
        }
      }

      // Start chat when a user is clicked
      searchResults.addEventListener('click', (e) => {
        if (e.target.dataset.id) {
          const userId = e.target.dataset.id;
          const username = e.target.innerText;

          startChat(userId, username);
          chatSearch.style.display = 'none';
          searchInput.value = '';
        }
      });

      function startChat(userId, username) {
        console.log('Starting chat with:', username, 'ID:', userId);
        alert(`Chat started with ${username}!`);
      }
    </script>
  </body>
</html>
