<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');
      * {
        font-family: 'Poppins', sans-serif;
      }
      body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #1a1a1a 0%, #2e2e2e 100%);
        background-image: url('../public/img/back.jpg');
        background-size: cover;
        backdrop-filter: blur(10px);
      }

      .login-container {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(15px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        padding: 2rem;
        width: 350px;
        color: #fff;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
      }

      .login-container h2 {
        margin-bottom: 1.5rem;
        font-weight: 600;
      }

      .login-container input {
        width: 92%;
        padding: 0.8rem;
        margin: 0.5rem 0 1rem 0;
        border: none;
        border-radius: 6px;
        background: rgba(255, 255, 255, 0.1);
        color: #fff;
        outline: none;
      }

      .login-container input::placeholder {
        color: #bbb;
      }

      .login-container button {
        width: 40%;
        padding: 0.8rem;
        background: linear-gradient(135deg, #360186, #0056b3);
        color: #fff;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      .login-container button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0, 123, 255, 0.5);
      }

      .login-container .message {
        margin-bottom: 1rem;
        display: none;
      }

      .login-container .message.error {
        color: #e74c3c;
      }

      .login-container .message.success {
        color: #2ecc71;
      }

      .login-container a {
        color: #ff7700;
        text-decoration: none;
        font-size: 0.9rem;
      }

      .login-container a:hover {
        text-decoration: underline;
      }
      .flxStart {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div class="login-container">
      <h2>LOGIN</h2>
      <div class="message" id="message"></div>
      <form id="login-form">
        <input
          type="text"
          name="usernameOrEmail"
          placeholder="Username or Email"
          required
        />

        <input
          type="password"
          name="password"
          placeholder="Password"
          required
        />
        <div class="flxStart">
          <button type="submit">Login</button>
          <a href="/forgot-password">Forgot your password?</a>
        </div>
      </form>
    </div>
    <script>
      const form = document.getElementById('login-form');
      const messageDiv = document.getElementById('message');

      form.addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent traditional form submission

        const formData = new FormData(form);
        const usernameOrEmail = formData.get('usernameOrEmail');
        const password = formData.get('password');

        // Send AJAX request
        fetch('/api/users/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ usernameOrEmail, password }),
        })
          .then((response) => response.json())
          .then((data) => {
            // Reset the message classes
            messageDiv.classList.remove('error', 'success');
            messageDiv.style.display = 'block';

            // Check the status and apply the appropriate style
            if (data.success) {
              // Optionally, redirect the user to the dashboard
              window.location.href = '/dashboard';
            } else {
              messageDiv.classList.add('error');
              messageDiv.textContent = data.message || 'An error occurred.';
            }
          })
          .catch((error) => {
            // Handle network errors
            messageDiv.classList.add('error');
            messageDiv.style.display = 'block';
            messageDiv.textContent = 'Network error. Please try again later.';
          });
      });
    </script>
  </body>
</html>
